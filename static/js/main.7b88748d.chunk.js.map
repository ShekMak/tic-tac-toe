{"version":3,"sources":["components/Square.tsx","services/Game.service.ts","components/Board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Square","props","onClick","event","preventDefault","winner","OnChange","id","alert","className","square","GameService","squares","Array","fill","nextPlayer","player","index","splice","getNextPlayer","calculateWinner","lines","length","first","second","third","console","log","initialeState","Board","useState","gameBoard","setGameBoard","countIteration","setCountIteration","play","move","restart","restartGame","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b88748d.chunk.js","sourcesContent":["function Square(props: any) {\n\n    function onChange(event: any) {\n        \n        event.preventDefault();\n        \n        if(props.winner === null)\n            props.OnChange(props.id)\n        else\n            alert(`Game Over, ${props.winner} wins`);\n    }\n\n    return (\n        <div onClick={onChange} className=\"w-1/3 border flex items-center justify-center border-white text-2xl text-white font-bold\">\n            { props.square || '-' }\n        </div>\n    );\n}\n\nexport default  Square;","export interface Game {\n    squares: String[];\n    nextPlayer: String;\n    winner: String | null;\n}\n\nabstract class GameService {\n\n    static initialeState: Game = {\n        squares: Array(9).fill(''),\n        nextPlayer: 'X',\n        winner: null\n    }\n\n    static restartGame(): Game{\n        return {\n            squares: Array(9).fill(''),\n            nextPlayer: 'X',\n            winner: null\n        }\n    }\n    \n    static getNextPlayer(player: String): String {\n        if(player === 'X'){\n            return 'O';\n        }\n        return 'X';\n    }\n\n    static move(index: number, squares: String[], player: String): Game{\n\n        if (!squares[index]) {\n            squares.splice(index, 1, player);\n        }\n        \n        return {\n            squares: squares,\n            nextPlayer: GameService.getNextPlayer(player),\n            winner: GameService.calculateWinner(squares)\n        };\n    }\n    \n    static calculateWinner(squares: String[]): String | null {\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ];\n\n        for (let index = 0; index < lines.length; index++) {\n            const [first, second, third] = lines[index];\n\n            if (squares[first] && (squares[first] === squares[second]) && (squares[first] === squares[third])) {\n                console.log(squares[first]);\n                return squares[first];\n            }\n        }\n\n        return null;\n    }\n\n}\n\nexport default GameService;","import Square from \"./Square\";\nimport GameService from \"../services/Game.service\";\nimport { useState } from \"react\";\n\nfunction Board() {\n\n    const [gameBoard, setGameBoard] = useState(GameService.initialeState);\n    const [countIteration, setCountIteration] = useState(0);\n\n    function play(index: number) {\n        setGameBoard(GameService.move(index, gameBoard.squares, gameBoard.nextPlayer));\n        setCountIteration(countIteration + 1);\n    }\n\n    function restart() {\n        setGameBoard(GameService.restartGame);\n        setCountIteration(0);\n    }\n\n    return(\n        <div className=\"w-5/12 h-4/5 mt-16 flex flex-col items-center justify-center border bg-white shadow-md rounded-lg\">\n            <div>\n                {\n                    gameBoard.winner \n                    \n                    && \n                    \n                    <p className=\"my-3\">The winner is :\n                        <span className=\"text-green-700 pl-2\">{gameBoard.winner}</span>\n                    </p>\n                }\n                {\n                    (gameBoard.winner === null && countIteration === 9 )\n                    \n                    && \n                    \n                    <p className=\"my-3\">No winner between\n                        <span className=\"text-green-700 pl-2 pr-2\"> X</span> and <span className=\"text-green-700 pl-2\"> O</span>\n                    </p>\n                }\n                {\n                    (gameBoard.winner === null && countIteration < 9 )\n                    \n                    && \n                    \n                    <p className=\"my-3\">The Game is\n                        <span className=\"text-green-700\"> in progress</span>\n                    </p>\n                }\n            </div>\n            <div className=\"bg-green-700 h-3/4 w-3/4 flex flex-wrap\">\n            {\n                gameBoard.squares.map(\n                    (square, index) => <Square key={index} OnChange={play} square={square} id={index} winner={gameBoard.winner\n                    }/>\n                )\n            }\n            </div>\n            {\n                // When the game is over with a winner\n                gameBoard.winner && <button onClick={restart} className=\"w-1/4 mt-4 p-4 bg-green-500\">Restart</button>\n            }\n            {\n                // When the game is over without winner\n                (gameBoard.winner === null && countIteration === 9 ) && <button onClick={restart} className=\"w-1/4 mt-4 p-4 bg-green-500\">Restart</button>\n            }\n        </div>\n    );\n}\n\nexport default Board;","import Board from './components/Board';\n\nfunction App() {\n  return (\n    <div className=\"h-screen w-screen overflow-hidden bg-gray-50 flex justify-center\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}